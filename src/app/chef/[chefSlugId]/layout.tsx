import { Metadata } from "next";
import { prisma } from "@/lib/prisma";
import { generateSeoMetadata, StructuredData } from "@/components/SeoHead";
import Footer from "@/components/Footer";
import NavBar from "@/components/NavBar";

interface ChefLayoutProps {
  children: React.ReactNode;
  params: Promise<{ chefSlugId: string }>;
}

/* generate metada */
export async function generateMetadata({
  params,
}: ChefLayoutProps): Promise<Metadata> {
  const { chefSlugId } = await params;

  const [idPart] = chefSlugId.split(".");
  const chefId = idPart;

  try {
    const chef = await prisma.chef.findUnique({
      where: { id: chefId },
      include: {
        user: true,
      },
    });

    if (!chef) {
      return {
        title: "Chef non trovato",
        description: "Il profilo chef richiesto non esiste.",
      };
    }

    /* use data generated by gemini */
    if (chef.seoTitle && chef.seoDescription) {
      return generateSeoMetadata({
        // @ts-expect-erorr
        seoTitle: chef.seoTitle,
        // @ts-expect-erorr
        seoDescription: chef.seoDescription,
        // @ts-expect-erorr
        seoKeywords: chef.seoKeywords,
        imageUrl: chef.coverUrl,
        url: `${process.env.NEXT_PUBLIC_APP_URL}/chef/${chefSlugId}`,
      });
    }

    /* fallback */
    const chefName = `${chef.user.firstname} ${chef.user.lastname}`;
    return generateSeoMetadata({
      seoTitle: `${chefName} - Chef Privato ${chef.city ? `a ${chef.city}` : ""}`,
      seoDescription:
        chef.bioBrief ||
        chef.bio ||
        `Scopri il profilo di ${chefName}, chef privato specializzato in cucina gourmet.`,
      imageUrl: chef.coverUrl,
      url: `${process.env.NEXT_PUBLIC_APP_URL}/chef/${chefSlugId}`,
    });
  } catch (error) {
    throw error;
    return {
      title: "Chef",
      description: "Profilo chef",
    };
  }
}

export default async function ChefLayout({ children, params }: ChefLayoutProps) {
  const { chefSlugId } = await params;
  return (
    <>
      <NavBar />
      <div className="mt-18">{children}</div>
      <Footer></Footer>
      <ChefStructuredData chefSlugId={chefSlugId} />
    </>
  );
}

/* component to inject datas */
async function ChefStructuredData({ chefSlugId }: { chefSlugId: string }) {
  const [idPart] = chefSlugId.split(".");
  const chefId = idPart;

  try {
    const chef = await prisma.chef.findUnique({
      where: { id: chefId },
      select: {
        id: true,
        // @ts-expect-erorr
        structuredData: true,
      },
    });

    // @ts-expect-erorr
    if (!chef?.structuredData) return null;

    // @ts-expect-erorr
    return <StructuredData data={chef.structuredData} />;
  } catch (error) {
    return null;
  }
}
